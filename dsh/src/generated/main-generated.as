
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	
 *	Class: 		main
 *	Source: 	C:\Documents and Settings\a\My Documents\Flex Builder 3\dsh\src\main.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2009.10.21 17:04:31 CST
 */

package 
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.containers.ViewStack;
import mx.controls.LinkButton;
import mx.controls.TabBar;
import mx.core.Application;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.FlexEvent;
import mx.events.ItemClickEvent;
import mx.styles.*;


[SWF( backgroundColor='16777215', heightPercent='100%', widthPercent='100%')]
[Frame(extraClass="_main_FlexInit")]

[Frame(factoryClass="_main_mx_managers_SystemManager")]


//	begin class def

public class main
	extends mx.core.Application
{

	//	instance variables
	[Bindable]
/**
 * @private
 **/
	public var btnFlexSpy : mx.controls.LinkButton;

	[Bindable]
/**
 * @private
 **/
	public var tabBar : mx.controls.TabBar;

	[Bindable]
/**
 * @private
 **/
	public var viewStack : mx.containers.ViewStack;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.core.Application
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.controls.TabBar
        ,
        id: "tabBar"
        ,
        events: {
          itemClick: "__tabBar_itemClick"
        }
        ,
        propertiesFactory: function():Object { return {
          height: 35,
          dataProvider: "viewStack"
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.containers.ViewStack
        ,
        id: "viewStack"
        ,
        stylesFactory: function():void {
          this.paddingTop = 15;
        }
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          percentHeight: 100.0
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.LinkButton
        ,
        id: "btnFlexSpy"
        ,
        events: {
          click: "__btnFlexSpy_click"
        }
        ,
        propertiesFactory: function():Object { return {
          x: 477,
          y: 53,
          label: "FlexSpy..."
        }}
      })
    ]
  }}
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function main()
	{
		super();

		mx_internal::_document = this;

		//	our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration();
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.horizontalAlign = "left";
			this.backgroundSize = "100%";
			this.backgroundColor = 16777215;
			this.paddingLeft = 45;
			this.paddingRight = 45;
			this.paddingBottom = 35;
			this.paddingTop = 34;
		};


		//	ambient styles
		mx_internal::_main_StylesInit();

		//	properties
		this.minWidth = 600;
		this.minHeight = 600;
		this.viewSourceURL = "srcview/index.html";

		//	events
		this.addEventListener("applicationComplete", ___main_Application1_applicationComplete);

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);



		super.initialize();
	}

	//	scripts
	//	<Script>, line 17 - 228

		//FlexSpy...
			import com.flexspy.*;
			import mx.core.FlexSprite;
	     	import mx.effects.easing.Bounce;
	     	//import mx.controls.Alert;     
	    //FlexSpy
			import com.esria.samples.dashboard.events.LayoutChangeEvent;
			import com.esria.samples.dashboard.managers.PodLayoutManager;
			import com.esria.samples.dashboard.managers.StateManager;
			import com.esria.samples.dashboard.view.ChartContent;
			import com.esria.samples.dashboard.view.FormContent;
			import com.esria.samples.dashboard.view.ListContent;
			import com.esria.samples.dashboard.view.PieChartContent;
			import com.esria.samples.dashboard.view.Pod;
			import com.esria.samples.dashboard.view.PodContentBase;
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			// Array of PodLayoutManagers
			private var podLayoutManagers:Array = new Array();
			
			// Stores the xml data keyed off of a PodLayoutManager.
			private var podDataDictionary:Dictionary = new Dictionary();
			
			// Stores PodLayoutManagers keyed off of a Pod.
			// Used for podLayoutManager calls after pods have been created for the first time.
			// Also, used for look-ups when saving pod content ViewStack changes.
			private var podHash:Object = new Object();
			
			private function onApplicationComplete():void
			{
				//FlexSpy...
				FlexSpy.registerKey(new KeySequence(123, true, false, false));
                FlexSpy.registerJS();
                this.btnFlexSpy.setFocus();
                //FlexSpy
				// Load pods.xml, which contains the pod layout.
				/*
				var httpService:HTTPService = new HTTPService();
				httpService.url = "data/pods.xml";
				httpService.resultFormat = "e4x";
				httpService.addEventListener(FaultEvent.FAULT, onFaultHttpService);
				httpService.addEventListener(ResultEvent.RESULT, onResultHttpService);
				httpService.send();
				*/
				var xmlstring:String = 
"\<view id=\"view0\" label=\"Sales\"\> \<pod  id=\"pod00\" type=\"chart\" title=\"Yearly Revenue\" dataSource=\"data/revenue.xml\" selectedViewIndex=\"1\" valueField=\"value\" categoryField=\"month\" dataTipUnitLabel=\"\$\*\M\" dataTipLabelField=\"month\"/\> \</view>";

				doThis(xmlstring);
			} 
			//FlexSpy...
			public function debug():void
        	{
              FlexSpy.show();
         	}
         	//Flexspy
			private function onFaultHttpService(e:FaultEvent):void
			{
				Alert.show("Unable to load data/pods.xml.");
			}
			
			//private function onResultHttpService(e:ResultEvent):void
			public function doThis(xmlstring:String):void
			{
				var viewXMLList:XMLList = new XMLList(xmlstring);
				var len:Number = viewXMLList.length();
				var containerWindowManagerHash:Object = new Object();
				for (var i:Number = 0; i < len; i++) // Loop through the view nodes.
				{
					// Create a canvas for each view node.
					var canvas:Canvas = new Canvas();
					// PodLayoutManager handles resize and should prevent the need for
					// scroll bars so turn them off so they aren't visible during resizes.
					canvas.horizontalScrollPolicy = viewXMLList[i].canvas.@horizontalScrollPolicy;
					canvas.verticalScrollPolicy = viewXMLList[i].@verticalScrollPolicy;
					//canvas.horizontalScrollPolicy = "off";
					//canvas.verticalScrollPolicy = "off";
					canvas.label = viewXMLList[i].@label;
					canvas.percentWidth = viewXMLList[i].@percentWidth;
					canvas.percentHeight = viewXMLList[i].@percentHeight;
					//canvas.percentWidth = 100;
					//canvas.percentHeight = 100;
					for each ( var item in viewXMLList[i].canvas )
					{
						trace (item);
						//canvas.[item] = viewXMLList[i].canvas.[item];
					}
					viewStack.addChild(canvas);
					
					// Create a manager for each view.
					var manager:PodLayoutManager = new PodLayoutManager();
					manager.container = canvas;
					manager.id = viewXMLList[i].@id;
					manager.addEventListener(LayoutChangeEvent.UPDATE, StateManager.setPodLayout);
					// Store the pod xml data. Used when view is first made visible.
					podDataDictionary[manager] = viewXMLList[i].pod;
					podLayoutManagers.push(manager);
				}
				
				var index:Number = StateManager.getViewIndex();
				// Make sure the index is not out of range.
				// This can happen if a tab view was saved but then tabs were subsequently removed from the XML.
				index = Math.min(tabBar.numChildren - 1, index);
				onItemClickTabBar(new ItemClickEvent(ItemClickEvent.ITEM_CLICK, false, false, null, index));
				tabBar.selectedIndex = index;
			}
			
			private function onItemClickTabBar(e:ItemClickEvent):void
			{
				var index:Number = e.index;
				StateManager.setViewIndex(index); // Save the view index.
				
				viewStack.selectedIndex = index;
				
				// If data exists then add the pods. After the pods have been added the data is cleared.
				var podLayoutManager:PodLayoutManager = podLayoutManagers[index];
				if (podDataDictionary[podLayoutManager] != null)
					addPods(podLayoutManagers[index]);
			}
			
			// Adds the pods to a view.
			private function addPods(manager:PodLayoutManager):void
			{
				// Loop through the pod nodes for each view node.
				var podXMLList:XMLList = podDataDictionary[manager];
				var podLen:Number = podXMLList.length();
				var unsavedPodCount:Number = 0;
				for (var j:Number = 0; j < podLen; j++)
				{
					// Figure out which type of pod content to use.
					var podContent:PodContentBase = null;
					if (podXMLList[j].@type == "chart")
						podContent = new ChartContent();
					else if (podXMLList[j].@type == "form")
						podContent = new FormContent();
					else if (podXMLList[j].@type == "list")
						podContent = new ListContent();
					else if (podXMLList[j].@type == "pieChart")
						podContent = new PieChartContent();
					
					if (podContent != null)
					{
						var viewId:String = manager.id;
						var podId:String = podXMLList[j].@id;
						
						// Get the saved value for the pod content viewStack.
						if (StateManager.getPodViewIndex(viewId, podId) != -1)
							podXMLList[j].@selectedViewIndex = StateManager.getPodViewIndex(viewId, podId);
						
						podContent.properties = podXMLList[j];
						var pod:Pod = new Pod();
						pod.id = podId;
						pod.title = podXMLList[j].@title;
						pod.addChild(podContent);
						var index:Number;
						
						if (StateManager.isPodMinimized(viewId, podId))
						{
							index = StateManager.getMinimizedPodIndex(viewId, podId);
							manager.addMinimizedItemAt(pod, index);
						}
						else
						{
							index = StateManager.getPodIndex(viewId, podId);
							
							// If the index hasn't been saved move the pod to the last position.
							if (index == -1)
							{
								index = podLen + unsavedPodCount;
								unsavedPodCount += 1;
							}
							
							manager.addItemAt(pod, index, StateManager.isPodMaximized(viewId, podId));
						}
						
						pod.addEventListener(IndexChangedEvent.CHANGE, onChangePodView);
						
						podHash[pod] = manager;
					}
				}
				
				// Delete the saved data.
				delete podDataDictionary[manager];
				
				// Listen for the last pod to complete so the layout from the ContainerWindowManager is done correctly. 
				pod.addEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
			}
			
			// Pod has been created so update the respective PodLayoutManager.
			private function onCreationCompletePod(e:FlexEvent):void
			{
				e.currentTarget.removeEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				var manager:PodLayoutManager = PodLayoutManager(podHash[e.currentTarget]);
				manager.removeNullItems();
				manager.updateLayout(false);
			}
			
			// Saves the pod content ViewStack state.
			private function onChangePodView(e:IndexChangedEvent):void
			{
				var pod:Pod = Pod(e.currentTarget);
				var viewId:String = PodLayoutManager(podHash[pod]).id;
				StateManager.setPodViewIndex(viewId, pod.id, e.newIndex);
			}
		

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function ___main_Application1_applicationComplete(event:mx.events.FlexEvent):void
{
	onApplicationComplete()
}

/**
 * @private
 **/
public function __tabBar_itemClick(event:mx.events.ItemClickEvent):void
{
	onItemClickTabBar(event)
}

/**
 * @private
 **/
public function __btnFlexSpy_click(event:flash.events.MouseEvent):void
{
	debug()
}



	//	initialize style defs for main

	mx_internal static var _main_StylesInit_done:Boolean = false;

	mx_internal function _main_StylesInit():void
	{
		//	only add our style defs to the StyleManager once
		if (mx_internal::_main_StylesInit_done)
			return;
		else
			mx_internal::_main_StylesInit_done = true;

		var style:CSSStyleDeclaration;
		var effects:Array;

		// Pod
		style = StyleManager.getStyleDeclaration("Pod");
		if (!style)
		{
			style = new CSSStyleDeclaration();
			StyleManager.setStyleDeclaration("Pod", style, false);
		}
		if (style.factory == null)
		{
			style.factory = function():void
			{
				this.borderColor = 0x999999;
				this.paddingLeft = 10;
				this.roundedBottomCorners = false;
				this.dropShadowColor = 0x999999;
				this.paddingBottom = 10;
				this.borderStyle = "solid";
				this.paddingTop = 31;
				this.highlightAlphas = [0.9, 0];
				this.cornerRadius = 6;
				this.paddingRight = 10;
				this.headerColors = [0xcccccc, 0x999999];
				this.shadowDirection = "right";
				this.headerHeight = 22;
				this.borderThickness = 1;
				this.backgroundColor = 0xffffff;
			};
		}
		// podTitle
		style = StyleManager.getStyleDeclaration(".podTitle");
		if (!style)
		{
			style = new CSSStyleDeclaration();
			StyleManager.setStyleDeclaration(".podTitle", style, false);
		}
		if (style.factory == null)
		{
			style.factory = function():void
			{
				this.fontWeight = "bold";
				this.fontSize = 11;
				this.fontFamily = "Arial";
			};
		}
		// DragHighlight
		style = StyleManager.getStyleDeclaration("DragHighlight");
		if (!style)
		{
			style = new CSSStyleDeclaration();
			StyleManager.setStyleDeclaration("DragHighlight", style, false);
		}
		if (style.factory == null)
		{
			style.factory = function():void
			{
				this.borderColor = 0xcccccc;
				this.borderThickness = 3;
				this.borderStyle = "solid";
				this.backgroundColor = 0xf3f3f3;
			};
		}
		// maximizeRestoreButton
		style = StyleManager.getStyleDeclaration(".maximizeRestoreButton");
		if (!style)
		{
			style = new CSSStyleDeclaration();
			StyleManager.setStyleDeclaration(".maximizeRestoreButton", style, false);
		}
		if (style.factory == null)
		{
			style.factory = function():void
			{
				this.selectedDownSkin = _embed_css__assets_restore_up_png_1213007776;
				this.selectedUpSkin = _embed_css__assets_restore_up_png_1213007776;
				this.selectedOverSkin = _embed_css__assets_restore_over_png_930999522;
				this.upSkin = _embed_css__assets_maximize_up_png_2143929460;
				this.downSkin = _embed_css__assets_maximize_up_png_2143929460;
				this.overSkin = _embed_css__assets_maximize_over_png_481121322;
			};
		}
		// rightArrowButton
		style = StyleManager.getStyleDeclaration(".rightArrowButton");
		if (!style)
		{
			style = new CSSStyleDeclaration();
			StyleManager.setStyleDeclaration(".rightArrowButton", style, false);
		}
		if (style.factory == null)
		{
			style.factory = function():void
			{
				this.upSkin = _embed_css__assets_right_arrow_up_gif_1298475158;
				this.downSkin = _embed_css__assets_right_arrow_up_gif_1298475158;
				this.overSkin = _embed_css__assets_right_arrow_over_gif_982183896;
				this.disabledSkin = _embed_css__assets_right_arrow_disabled_gif_757532184;
			};
		}
		// minimizeButton
		style = StyleManager.getStyleDeclaration(".minimizeButton");
		if (!style)
		{
			style = new CSSStyleDeclaration();
			StyleManager.setStyleDeclaration(".minimizeButton", style, false);
		}
		if (style.factory == null)
		{
			style.factory = function():void
			{
				this.upSkin = _embed_css__assets_minimize_up_png_1930034592;
				this.downSkin = _embed_css__assets_minimize_up_png_1930034592;
				this.overSkin = _embed_css__assets_minimize_over_png_815794522;
			};
		}
		// leftArrowButton
		style = StyleManager.getStyleDeclaration(".leftArrowButton");
		if (!style)
		{
			style = new CSSStyleDeclaration();
			StyleManager.setStyleDeclaration(".leftArrowButton", style, false);
		}
		if (style.factory == null)
		{
			style.factory = function():void
			{
				this.upSkin = _embed_css__assets_left_arrow_up_gif_624161696;
				this.downSkin = _embed_css__assets_left_arrow_up_gif_624161696;
				this.overSkin = _embed_css__assets_left_arrow_over_gif_468662234;
				this.disabledSkin = _embed_css__assets_left_arrow_disabled_gif_379610662;
			};
		}
		// Application
		style = StyleManager.getStyleDeclaration("Application");
		if (!style)
		{
			style = new CSSStyleDeclaration();
			StyleManager.setStyleDeclaration("Application", style, false);
		}
		if (style.factory == null)
		{
			style.factory = function():void
			{
				this.color = 0x000000;
				this.backgroundGradientColors = [0xffffff, 0xffffff];
				this.backgroundImage = _embed_css__assets_application_background_png_926061374;
			};
		}
		// tabBarButtonSelected
		style = StyleManager.getStyleDeclaration(".tabBarButtonSelected");
		if (!style)
		{
			style = new CSSStyleDeclaration();
			StyleManager.setStyleDeclaration(".tabBarButtonSelected", style, false);
		}
		if (style.factory == null)
		{
			style.factory = function():void
			{
				this.color = 0x003399;
				this.textRollOverColor = 0x003399;
			};
		}
		// TabBar
		style = StyleManager.getStyleDeclaration("TabBar");
		if (!style)
		{
			style = new CSSStyleDeclaration();
			StyleManager.setStyleDeclaration("TabBar", style, false);
		}
		if (style.factory == null)
		{
			style.factory = function():void
			{
				this.tabStyleName = "tabBarButton";
				this.selectedTabTextStyleName = "tabBarButtonSelected";
			};
		}
		// tabBarButton
		style = StyleManager.getStyleDeclaration(".tabBarButton");
		if (!style)
		{
			style = new CSSStyleDeclaration();
			StyleManager.setStyleDeclaration(".tabBarButton", style, false);
		}
		if (style.factory == null)
		{
			style.factory = function():void
			{
				this.paddingLeft = 10;
				this.textRollOverColor = 0x858585;
				this.upSkin = _embed_css__assets_tab_up_png_307701002;
				this.fontSize = 12;
				this.overSkin = _embed_css__assets_tab_up_png_307701002;
				this.fontFamily = "Arial";
				this.paddingTop = -4;
				this.textAlign = "left";
				this.color = 0x333333;
				this.selectedDownSkin = _embed_css__assets_tab_selected_png_44586388;
				this.selectedUpSkin = _embed_css__assets_tab_selected_png_44586388;
				this.paddingRight = 20;
				this.selectedOverSkin = _embed_css__assets_tab_selected_png_44586388;
				this.downSkin = _embed_css__assets_tab_up_png_307701002;
			};
		}

		StyleManager.mx_internal::initProtoChainRoots();
	}


	//	embed carrier vars
[Embed(_pathsep='true', scaleGridLeft='350', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/application_background.png', scaleGridBottom='791', original='/assets/application_background.png', scaleGridTop='94', scaleGridRight='690', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/application_background.png', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='6')]
 private var _embed_css__assets_application_background_png_926061374:Class;

[Embed(_pathsep='true', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/left_arrow_disabled.gif', original='/assets/left_arrow_disabled.gif', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/left_arrow_disabled.gif', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='95')]
 private var _embed_css__assets_left_arrow_disabled_gif_379610662:Class;

[Embed(_pathsep='true', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/left_arrow_over.gif', original='/assets/left_arrow_over.gif', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/left_arrow_over.gif', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='93')]
 private var _embed_css__assets_left_arrow_over_gif_468662234:Class;

[Embed(_pathsep='true', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/left_arrow_up.gif', original='/assets/left_arrow_up.gif', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/left_arrow_up.gif', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='92')]
 private var _embed_css__assets_left_arrow_up_gif_624161696:Class;

[Embed(_pathsep='true', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/maximize_over.png', original='/assets/maximize_over.png', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/maximize_over.png', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='12')]
 private var _embed_css__assets_maximize_over_png_481121322:Class;

[Embed(_pathsep='true', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/maximize_up.png', original='/assets/maximize_up.png', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/maximize_up.png', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='11')]
 private var _embed_css__assets_maximize_up_png_2143929460:Class;

[Embed(_pathsep='true', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/minimize_over.png', original='/assets/minimize_over.png', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/minimize_over.png', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='22')]
 private var _embed_css__assets_minimize_over_png_815794522:Class;

[Embed(_pathsep='true', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/minimize_up.png', original='/assets/minimize_up.png', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/minimize_up.png', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='21')]
 private var _embed_css__assets_minimize_up_png_1930034592:Class;

[Embed(_pathsep='true', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/restore_over.png', original='/assets/restore_over.png', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/restore_over.png', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='15')]
 private var _embed_css__assets_restore_over_png_930999522:Class;

[Embed(_pathsep='true', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/restore_up.png', original='/assets/restore_up.png', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/restore_up.png', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='14')]
 private var _embed_css__assets_restore_up_png_1213007776:Class;

[Embed(_pathsep='true', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/right_arrow_disabled.gif', original='/assets/right_arrow_disabled.gif', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/right_arrow_disabled.gif', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='103')]
 private var _embed_css__assets_right_arrow_disabled_gif_757532184:Class;

[Embed(_pathsep='true', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/right_arrow_over.gif', original='/assets/right_arrow_over.gif', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/right_arrow_over.gif', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='101')]
 private var _embed_css__assets_right_arrow_over_gif_982183896:Class;

[Embed(_pathsep='true', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/right_arrow_up.gif', original='/assets/right_arrow_up.gif', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/right_arrow_up.gif', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='100')]
 private var _embed_css__assets_right_arrow_up_gif_1298475158:Class;

[Embed(_pathsep='true', scaleGridLeft='9', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/tab_selected.png', scaleGridBottom='31', original='/assets/tab_selected.png', scaleGridTop='13', scaleGridRight='91', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/tab_selected.png', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='37')]
 private var _embed_css__assets_tab_selected_png_44586388:Class;

[Embed(_pathsep='true', scaleGridLeft='10', _resolvedSource='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/tab_up.png', scaleGridBottom='30', original='/assets/tab_up.png', scaleGridTop='11', scaleGridRight='92', source='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/tab_up.png', _file='C:/Documents and Settings/a/My Documents/Flex Builder 3/dsh/src/assets/styles.css', _line='34')]
 private var _embed_css__assets_tab_up_png_307701002:Class;

	//	end embed carrier vars


//	end class def
}

//	end package def
}
