
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	com.esria.samples.dashboard.view
 *	Class: 		PieChartContent
 *	Source: 	C:\Documents and Settings\a\My Documents\Flex Builder 3\dsh\src\com\esria\samples\dashboard\view\PieChartContent.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2009.10.21 17:04:11 CST
 */

package com.esria.samples.dashboard.view
{

import com.esria.samples.dashboard.view.PieChartContent_inlineComponent1;
import com.esria.samples.dashboard.view.PodContentBase;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.charts.PieChart;
import mx.charts.series.PieSeries;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.EffectEvent;
import mx.styles.*;
import qs.charts.effects.DrillDownEffect;
import qs.charts.effects.DrillUpEffect;



//	begin class def

public class PieChartContent
	extends com.esria.samples.dashboard.view.PodContentBase
	implements mx.binding.IBindingClient
{

	//	instance variables
	[Bindable]
/**
 * @private
 **/
	public var drillDownEffect : qs.charts.effects.DrillDownEffect;

	[Bindable]
/**
 * @private
 **/
	public var drillUpEffect : qs.charts.effects.DrillUpEffect;

	[Bindable]
/**
 * @private
 **/
	public var pieChart : mx.charts.PieChart;

	[Bindable]
/**
 * @private
 **/
	public var pieSeries : mx.charts.series.PieSeries;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: com.esria.samples.dashboard.view.PodContentBase
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.charts.PieChart
        ,
        id: "pieChart"
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          percentHeight: 100.0,
          dataTipFunction: pieChartDataTipFunction,
          showDataTips: true,
          series: [_PieChartContent_PieSeries1_i()]
        }}
      })
    ]
  }}
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function PieChartContent()
	{
		super();

		mx_internal::_document = this;

		//	our style settings



		//	properties
		this.percentWidth = 100.0;
		this.percentHeight = 100.0;
		_PieChartContent_DrillDownEffect1_i();
		_PieChartContent_DrillUpEffect1_i();

		//	events

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		var bindings:Array = _PieChartContent_bindingsSetup();
		var watchers:Array = [];

		var target:PieChartContent = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_com_esria_samples_dashboard_view_PieChartContentWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					bindings,
					watchers);

		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


		super.initialize();
	}

	//	scripts
	//	<Script>, line 13 - 114

			import mx.charts.events.ChartItemEvent;
			import mx.charts.HitData;
			import mx.charts.series.items.PieSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			
			// The original data provider used for drillUp.
			private var initialDataProvider:ArrayCollection;
			[Bindable]
			private var dataProvider:ArrayCollection;
			
			// Chart drill down variables. Users can only drill down
			// one level then click the chart to drill up.
			// Note, the majority of the drill down code including all of the classes in the "qs" package
			// are from Ely Greenfield's blog, http://www.quietlyscheming.com/blog/charts/chart-drilldown-animations/.
			private var drillToIndex:Number;
			
			override protected function onResultHttpService(e:ResultEvent):void
			{
				var a:Array = xmlListToObjectArray(e.result.item);
				var ac:ArrayCollection = new ArrayCollection(a);
				initialDataProvider = ac;
				dataProvider = ac;
				
				pieChart.addEventListener(ChartItemEvent.ITEM_CLICK, drillDown);
			}
			
			private function pieChartDataTipFunction(o:HitData):String
			{
				var a:Array = properties.@dataTipUnitLabel.split("*");
				var s:String = o.item[properties.@dataTipLabelField] + "\n";
				s += a[0] + o.item[properties.@valueField] + a[1] + "\n";
				s += Math.round(PieSeriesItem(o.chartItem).percentValue) + "%";
				return s;
			}
			
			// Creates random drill down data.
			// Assumes initial data is by geographical region and breaks down the region into sub-regions.
			public function createDrillDownData(data:Object):ArrayCollection
			{
				var ac:ArrayCollection = new ArrayCollection();
				var total:Number = data[properties.@valueField];
				var regions:Array;
				
				if (data.region == "North America")
					regions = ["East", "Central", "West"];
				else if (data.region == "South America")
					regions = ["Andean", "Guianas", "Southern Cone", "Brazil"];
				else if (data.region == "EMEA")
					regions = ["Europe", "Middle East", "Africa"];
				else if (data.region == "APAC")
					regions = ["China", "Japan", "Australia", "Vietnam"];
				
				var len:Number = regions.length;
				var randomPercents:Array = new Array();
				var totalPercents:Number = 0;
				var value:Number;
				// Generate an Array of random numbers that will be used to create percentages of the totals in the next loop.
				for (var i:Number = 0; i < len; i ++)
				{
					value = Math.max(.1, Math.random());// Make sure the number is not zero.
					randomPercents.push(value);
					totalPercents += value;
				}
				
				for (i = 0; i < len; i ++)
				{
					var o:Object = new Object();
					value = (randomPercents[i] / totalPercents) * total;
					o[properties.@valueField] = Math.round(value * 10) / 10;
					o[properties.@categoryField] = regions[i];
					ac.addItem(o);
				}
				
				return ac;
			}
			
			public function drillDown(e:ChartItemEvent):void
			{
				pieChart.showDataTips = false;
				drillToIndex = e.hitData.chartItem.index
				drillDownEffect.drillFromIndex = drillToIndex;
				pieSeries.setStyle("showDataEffect", drillDownEffect);
				dataProvider = createDrillDownData(Object(e.hitData.chartItem.item)); 
				
				pieChart.removeEventListener(ChartItemEvent.ITEM_CLICK, drillDown);
				pieChart.addEventListener(MouseEvent.CLICK, drillUp);
			}
			
			public function drillUp(e:MouseEvent):void
			{
				pieChart.showDataTips = false;
				drillUpEffect.drillToIndex = drillToIndex;
				pieSeries.setStyle("showDataEffect", drillUpEffect);
				dataProvider = initialDataProvider; 
				
				pieChart.addEventListener(ChartItemEvent.ITEM_CLICK, drillDown);
				pieChart.removeEventListener(MouseEvent.CLICK, drillUp);
			}
			
		

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _PieChartContent_DrillDownEffect1_i() : qs.charts.effects.DrillDownEffect
{
	var temp : qs.charts.effects.DrillDownEffect = new qs.charts.effects.DrillDownEffect();
	drillDownEffect = temp;
	temp.duration = 1500;
	temp.addEventListener("effectEnd", __drillDownEffect_effectEnd);
	return temp;
}

/**
 * @private
 **/
public function __drillDownEffect_effectEnd(event:mx.events.EffectEvent):void
{
	pieChart.showDataTips=true
}

private function _PieChartContent_DrillUpEffect1_i() : qs.charts.effects.DrillUpEffect
{
	var temp : qs.charts.effects.DrillUpEffect = new qs.charts.effects.DrillUpEffect();
	drillUpEffect = temp;
	temp.duration = 1500;
	temp.addEventListener("effectEnd", __drillUpEffect_effectEnd);
	return temp;
}

/**
 * @private
 **/
public function __drillUpEffect_effectEnd(event:mx.events.EffectEvent):void
{
	pieChart.showDataTips=true
}

private function _PieChartContent_PieSeries1_i() : mx.charts.series.PieSeries
{
	var temp : mx.charts.series.PieSeries = new mx.charts.series.PieSeries();
	pieSeries = temp;
	temp.setStyle("labelPosition", "callout");
	temp.setStyle("itemRenderer", _PieChartContent_ClassFactory1_c());
	temp.id = "pieSeries";
	mx.binding.BindingManager.executeBindings(this, "pieSeries", pieSeries);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _PieChartContent_ClassFactory1_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = com.esria.samples.dashboard.view.PieChartContent_inlineComponent1;
	temp.properties = {outerDocument: this};
	return temp;
}


	//	binding mgmt
    private function _PieChartContent_bindingsSetup():Array
    {
        var result:Array = [];
        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (dataProvider);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                pieChart.dataProvider = _sourceFunctionReturnValue;
            },
            "pieChart.dataProvider");
        result[0] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (properties.@valueField);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                pieSeries.field = _sourceFunctionReturnValue;
            },
            "pieSeries.field");
        result[1] = binding;

        return result;
    }

    private function _PieChartContent_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (dataProvider);
		[Binding(id='1')]
		destination = (properties.@valueField);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (PieChartContent)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;



	//	embed carrier vars
	//	end embed carrier vars

	//	binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//	end class def
}

//	end package def
}
