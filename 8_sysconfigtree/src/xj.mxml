<?xml version="1.0" encoding="utf-8"?>

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="creationCompleteHandler();"
	 initialize="flash.system.System.useCodePage=true">
	<mx:Style source="flex_skins.css" />
	<mx:Script>
		<![CDATA[
			import mx.events.*;
			import mx.containers.TitleWindow;
			import mx.managers.PopUpManager;
			import mx.controls.Alert;
			import mx.collections.XMLListCollection;
			import mx.managers.DragManager;
			import mx.events.DragEvent;
			import mx.core.DragSource;
			import mx.controls.List;
			import mx.controls.DataGrid;
			import mx.controls.listClasses.ListBase;
			import mx.core.UIComponent;
			import mx.collections.ArrayCollection;
			
			import flash.net.Socket;
			import flash.utils.ByteArray;
			import flash.events.SecurityErrorEvent;
			import flash.events.IOErrorEvent;
			import flash.events.ProgressEvent;
			import com.adobe.serialization.json.*;
			private var socket:Socket=new Socket();
			private var tempstr:String="";
			private var receivestr:String="";
			private var initflag:Boolean=true;
			
			private function creationCompleteHandler():void 
			{
				titleWindow = PopUpManager.createPopUp(this, login, true) as TitleWindow;
				PopUpManager.centerPopUp(titleWindow);


				var expandMenu2:ContextMenu=new ContextMenu();
				expandMenu2.hideBuiltInItems();
//				var menumodtree2:ContextMenuItem=new ContextMenuItem("用户－修改节点");
//				menumodtree2.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, modtree2);
//				expandMenu2.customItems.push(menumodtree2);
//
				var menuremovenode2:ContextMenuItem=new ContextMenuItem("用户－删除节点");
				menuremovenode2.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,removenode2);
				expandMenu2.customItems.push(menuremovenode2);

				menuremovenode2=new ContextMenuItem("保存用户配置");
				menuremovenode2.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,saveconfig);
				expandMenu2.customItems.push(menuremovenode2);
				
//				var menuremovenode2:ContextMenuItem=new ContextMenuItem("删除用户配置");
//				menuremovenode2.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,removedts);
//				expandMenu2.customItems.push(menuremovenode2);

				usertree.contextMenu=expandMenu2;
				showtext();
				
				socket.addEventListener(ProgressEvent.SOCKET_DATA,funreceive);
				socket.addEventListener(Event.CONNECT,funConnect);
				socket.addEventListener(Event.CLOSE,funClose);
				socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR,funSecurity);
				socket.addEventListener(IOErrorEvent.IO_ERROR,funIOError);
			}
			Alert.buttonWidth = 100;
			Alert.yesLabel = "确定";
			Alert.noLabel = "取消";

			private var titleWindow:TitleWindow;
			private var dtsxml2:XML =<L KEY="config" KEYNAME="字段定义1" VALUE="field" />;
			[Bindable]
			private var dtsxml:XML =<L/>;

			[Bindable]
			private var sysdtsxml:XMLListCollection = new XMLListCollection(dtsxml.L);
			[Bindable]
			private var userdtsxml:XMLListCollection = new XMLListCollection(dtsxml2.L);
			private function onTreeDragComplete(event:DragEvent):void {showtext();}
			private function showtext():void {ta.text=dtsxml2.toXMLString();}
			private function removenode2(event:Event):void
			{
				if(usertree.selectedIndex>=0) Alert.show("是否要删除节点？-->"+usertree.selectedItem.@KEYNAME, "删除节点",3, this, removeClickHandler2);
				else {Alert.show("请选择节点！");}
			}
			private function removeClickHandler2(event:CloseEvent):void {
				if (event.detail==Alert.YES){
					var children:XMLList = XMLList(usertree.selectedItem.parent()).children();
					for(var i:int=0; i < children.length(); i++) {
						if( children[i].@KEYNAME == XML(usertree.selectedItem).@KEYNAME ) {
							delete children[i];
						}
					}
				}
				usertree.dataProvider=dtsxml2.L;
				showtext();
			}
			private function saveconfig(event:Event):void
			{
				Alert.show("是否要保存配置？", "保存配置",3, this, saveconfigHandler);
			}
			private function saveconfigHandler(event:CloseEvent):void {
				if (event.detail==Alert.YES){
					var tempstr0:String="{version:\"1.0\",type:\"request\",reqflag:false,reqtype:\"xml\",respflag:false,resptype:\"json\",active:\"YSProxyDtpDTSConfigInsert\",reqmemo:\" \",application:\"MyApp\",username:\"admin\"}";
					var tempstr1:String="<?xml version=\"1.0\" encoding=\"gbk\" ?>"+dtsxml2.toXMLString();
					tempstr=formatsendmsg(tempstr0)+formatsendmsg(tempstr1);
					ta.text+="\n\n发送字串\n"+tempstr+"\n";
					getConnect();
					
				}
			}
			internal function formatsendmsg(msg:String):String{
				var m:ByteArray=new ByteArray();
				m.writeMultiByte(msg, "GB_CN");
				var msglen:String=m.length.toString();
				var msglenlen:String=msglen.length.toString();
				msg=msglenlen+msglen+msg;
				return(msg);
			}
			private function editxml():void {
				var tempstr0:String="{version:\"1.0\",type:\"request\",reqflag:false,reqtype:\"json\",respflag:false,resptype:\"json\",active:\"YSProxyDtpDTSConfigSelect\"}";
				var tempstr1:String="{\"__DICT_IN\":[\""+editxml_text.text+"\"]}";
				tempstr=formatsendmsg(tempstr0)+formatsendmsg(tempstr1);
				ta.text+="\n\n发送字串\n"+tempstr+"\n";
				getConnect();
			}
			public function disxml():void {
				var tempstr0:String="{version:\"1.0\",type:\"request\",reqflag:false,reqtype:\"json\",respflag:false,resptype:\"json\",active:\"YSProxyDtpDTSSelect\"}";
				var tempstr1:String="{\"__DICT_IN\":[\""+editxml_text.text+"\"]}";
				tempstr=formatsendmsg(tempstr0)+formatsendmsg(tempstr1);
				ta.text+="\n\n发送字串\n"+tempstr+"\n";
				getConnect();
			}
			private function chgsocket():void {
				if(ip_text.text=="192.168.0.77"){ip_text.text="192.168.0.201";port_text.text="6900";}
				else {ip_text.text="192.168.0.77";port_text.text="16920";}
			}
			private function modclick():void{
                var nodeadd:XMLList=XMLList(usertree.selectedItem);
                var str:String="";
                var newNode:XML;
				usertree.selectedItem.@KEYNAME=KEYNAMEtext.text;
                usertree.selectedItem.@KEY=keytext.text;
                usertree.selectedItem.@VALUE=valuetext.text;
                usertree.invalidateList();
                usertree.invalidateDisplayList();
                showtext();
			}
		]]>
	</mx:Script>
	<mx:TitleWindow title="系统配置" width="100%" height="100%" fontSize="13">
		<mx:HBox  width="100%" height="100%">
			<mx:VBox width="25%" height="100%">
				<mx:Label text="source"/>
				<mx:Tree  labelField="@KEYNAME" dataProvider="{sysdtsxml}"
						 id="systree" width="100%" height="100%" 
						 allowMultipleSelection="true"                
						 dragEnabled="true"
						 dragComplete="onTreeDragComplete(event)"
						 dropEnabled="false"
						 dragMoveEnabled="false"/>
			</mx:VBox>
			<mx:VBox width="25%" height="100%">
				<mx:Label text="target"/>
				<mx:Tree labelField="@KEYNAME" dataProvider="{userdtsxml}"
						 id="usertree" width="100%" height="80%"
						 allowMultipleSelection="true"                
						 dragEnabled="true"
						 dragComplete="onTreeDragComplete(event)"
						 dropEnabled="true"/>
				<mx:HBox width="100%" horizontalAlign="center">
					<mx:Label text="标题：" fontSize="12"/>
					<mx:TextInput id="KEYNAMEtext" width="150"  fontSize="12" text="{usertree.selectedItem.@KEYNAME}"/>
				</mx:HBox>
				<mx:HBox width="100%" horizontalAlign="center">
					<mx:Label text="键名：" fontSize="12"/>
					<mx:TextInput id="keytext" width="150"  fontSize="12" text="{usertree.selectedItem.@KEY}"/>
				</mx:HBox>
				<mx:HBox width="100%" horizontalAlign="center">
					<mx:Label text="键值：" fontSize="12"/>
					<mx:TextInput id="valuetext" width="150" fontSize="12" text="{usertree.selectedItem.@VALUE}"/>
				</mx:HBox>
				<mx:HBox width="100%" horizontalAlign="center">
					<mx:Button label="修改" fontSize="12" click="modclick()"/>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="50%" height="100%">
				<mx:HBox width="100%" horizontalAlign="center">
					<mx:Label text="服务器地址：" fontSize="12" textAlign="right"/>
					<mx:TextInput width="120" id="ip_text" text="192.168.0.77"/>
					<mx:Label text="端口：" width="55" fontSize="12" textAlign="right"/>
					<mx:TextInput width="60" id="port_text" text="16920"/>
					<mx:Spacer width="20%"/>
					<mx:Button label="更换SOCKET主机" click="chgsocket();"/>
				</mx:HBox>
				<mx:HBox borderStyle="solid" width="100%" color="0x323232" horizontalAlign="center"
		            paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
		            <mx:Label text="DICT_IN：" width="90" fontSize="12" textAlign="right"/>
		            <mx:TextInput width="180" id="editxml_text" text=""/>
		            <mx:Button label="接收编辑XML" click="editxml();"/>
		            <mx:Button label="接收页面XML" click="disxml();"/>
		        </mx:HBox>
		        <mx:TextArea id="ta" width="100%" height="100%"/>
			</mx:VBox>
		</mx:HBox>
	</mx:TitleWindow>
	<mx:Script>
		<![CDATA[
			internal function getConnect():void{
				var sIP:String = ip_text.text;
				var sPort:Number = Number(port_text.text);
				if(!(sIP&&sPort)){
					Alert.show('服务器地址和端口号必填！','Warning:');
				}else{
					ta.text+= 'Connecting......\n';
					socket.connect(sIP,sPort);
				}
			}
			internal function funreceive(event:ProgressEvent):void
			{
				var mstr:ByteArray=new ByteArray;
				while(socket.bytesAvailable){
					socket.readBytes(mstr,0,socket.bytesAvailable);
				}
				ta.text+="返回字串\n"+mstr+"\r\n";
				receivestr+=mstr;
				if((receivestr.substr(-2,2)=="]}")||(receivestr.substr(-4,4)=="</L>")||(receivestr.substr(-4,4)=="ews>")) {
					ta.text+="\n字串接收完毕\n";
					socket.close();
					if((initflag)&&(receivestr.substr(-4,4)=="</L>")){
						initflag=false;
						while (receivestr.substr(0,6)!="<L KEY"){
							receivestr=receivestr.substring(1,receivestr.length);
						}
						dtsxml=XML(receivestr);
						sysdtsxml.source=XMLList(dtsxml.L);
						sysdtsxml.refresh();
					}
				}
			}
            internal function funConnect(event:Event):void
			{
				ta.text+="\n连接已建立\n";
				receivestr="";
				socket.writeMultiByte(tempstr,"CN-GB");
				socket.flush();
			}
			internal function funClose(event:Event):void
			{
				ta.text+="\n连接已关闭\n";
//				socket.close();
			}
			internal function funSecurity(e:SecurityErrorEvent):void{
				Alert.show('安全错误：'+e.text,'Security Error');
				ta.text+= 'Security Error!';
			}
			internal function funIOError(e:IOErrorEvent):void{
				Alert.show('IO错误：'+e.text,'Socket connect Error');
				ta.text+= 'Socket connect Error!';
			}
		]]>
	</mx:Script>
	
</mx:Application>
