<?xml version="1.0" encoding="utf-8"?>

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="creationCompleteHandler();"
	 initialize="flash.system.System.useCodePage=true">
	<mx:Style source="flex_skins.css" />
	<mx:Script>
		<![CDATA[
			import mx.events.*;
			import mx.containers.TitleWindow;
			import mx.managers.PopUpManager;
			import mx.controls.Alert;
			import mx.collections.XMLListCollection;
			import mx.managers.DragManager;
			import mx.events.DragEvent;
			import mx.core.DragSource;
			import mx.controls.List;
			import mx.controls.DataGrid;
			import mx.controls.listClasses.ListBase;
			import mx.core.UIComponent;
			import mx.collections.ArrayCollection;
			
			import com.yspay.ServiceCall;
			import com.yspay.ServiceCallCompleteEvent;
			import com.yspay.DBSDTSObject.DtsRequest;
			
			import flash.net.Socket;
			import flash.utils.ByteArray;
			import flash.events.SecurityErrorEvent;
			import flash.events.IOErrorEvent;
			import flash.events.ProgressEvent;
			import com.adobe.serialization.json.*;
			
			private var socket:Socket=new Socket();
			private var tempstr:String="";
			private var receivestr:String="";
			private var initflag:Boolean=true;
			private var issavedelete:Boolean=false;
			private var mstr:ByteArray=new ByteArray;
			private var totallength:int=999999;
			private var selectedindex:int=-1;
			private var _serviceCall:ServiceCall = new ServiceCall();
				
			
			private function creationCompleteHandler():void 
			{
				titleWindow = PopUpManager.createPopUp(this, login, true) as TitleWindow;
				PopUpManager.centerPopUp(titleWindow);


				var expandMenu:ContextMenu=new ContextMenu();
				expandMenu.hideBuiltInItems();
				var menumodtree:ContextMenuItem=new ContextMenuItem("删除节点");
				menumodtree.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, removenode);
				expandMenu.customItems.push(menumodtree);
				systree.contextMenu=expandMenu;
				
				var expandMenu2:ContextMenu=new ContextMenu();
				expandMenu2.hideBuiltInItems();
				var menuremovenode2:ContextMenuItem=new ContextMenuItem("删除节点");
				menuremovenode2.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,removenode2);
				expandMenu2.customItems.push(menuremovenode2);

				var menuremovenode2:ContextMenuItem=new ContextMenuItem("保存用户配置");
				menuremovenode2.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,saveconfig);
				expandMenu2.customItems.push(menuremovenode2);

				usertree.contextMenu=expandMenu2;
				showtext();
				
				// socket.addEventListener(ProgressEvent.SOCKET_DATA,funreceive);
				// socket.addEventListener(Event.CONNECT,funConnect);
				// socket.addEventListener(Event.CLOSE,funClose);
				// socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR,funSecurity);
				// socket.addEventListener(IOErrorEvent.IO_ERROR,funIOError);
				
				
				this.addEventListener(ServiceCallCompleteEvent.OPERATION_COMPLETE, DataReady);
				
				_serviceCall.SetServerInfo(ip_text.text, int(port_text.text));
				_serviceCall.SetCompleteHandler(this);
			}
			
			private function DataReady(event:ServiceCallCompleteEvent):void
			{
			    trace ("DataReady:head:", event.ResponseHead);
			    trace ("DataReady:body:", event.ResponseBody);
			    
			    ta.text += "\n接收数据包头:\n";
			    ta.text += event.ResponseHead;
			    ta.text += "\n接收数据包体:\n";
			    ta.text += event.ResponseBody;
                
                // var arr:Array = JSON.decode("[" + event.ResponseHead + "]") as Array;
                
                dtsxml=XML(event.ResponseBody);
                sysdtsxml.source=XMLList(dtsxml.L);
                sysdtsxml.refresh();
                
			}
			Alert.buttonWidth = 100;
			Alert.yesLabel = "确定";
			Alert.noLabel = "取消";

			private var titleWindow:TitleWindow;
			private var dtsxml2:XML =<L KEY="config" KEYNAME="字段定义1" VALUE="field"/>;
			private var dtsxml3:XML =
				<L KEY="config" KEYNAME="字段定义1" VALUE="field">
					<L KEY="待定" KEYNAME="待定" VALUE=""><A KEY="待定属性" KEYNAME="待定属性" VALUE=""/></L>
				</L>;
			[Bindable]
			private var dtsxml:XML =<L/>;

			[Bindable]
			private var sysdtsxml:XMLListCollection = new XMLListCollection(dtsxml.*);
			[Bindable]
			private var userdtsxml:XMLListCollection = new XMLListCollection(dtsxml2.*);
			private function onTreeDragComplete(event:DragEvent):void {showtext();}
			private function showtext():void {
				dtsxml2.@KEYNAME=headkeyname.text;
				dtsxml2.@VALUE=headvalue.text;
				ta.text=dtsxml2.toXMLString();
//				userdtsxml.source=XMLList(dtsxml2.*);
//				userdtsxml.refresh();
//				ta.text+="\n--dtsxml2.@KEYNAME:"+dtsxml2.@KEYNAME+"\n--dtsxml2.@VALUE:"+dtsxml2.@VALUE+"\n";
			}
			private function removenode(event:Event):void{
				if(systree.selectedIndex>=0){
					if(systree.selectedItem.@KEY=="DTS"){
						Alert.show("是否要删除节点？-->"+systree.selectedItem.@KEYNAME, "删除节点",3, this, removeClickHandler);
					}else{Alert.show("请选择DTS节点！");}
				}else {Alert.show("请选择节点！");}
			}
			private function removeClickHandler(event:CloseEvent):void {
				if (event.detail==Alert.YES){
					issavedelete=true;
					var tempstr0:String="{version:\"1.0\",type:\"request\",reqflag:false,reqtype:\"json\",respflag:false,resptype:\"json\",active:\"YSDBSDTSObjectConfigDelete\"}";
					var tempstr1:String="{\"__DICT_IN\":[\""+systree.selectedItem.@VALUE+"\"]}";
					tempstr=formatsendmsg(tempstr0)+formatsendmsg(tempstr1);
					ta.text+="\n\n发送字串\n"+tempstr+"\n";
					getConnect();
				}
			}
			private function removenode2(event:Event):void
			{
				if(usertree.selectedIndex>=0) {
					var children:XMLList = XMLList(usertree.selectedItem.parent().children());
					for(var i:int=0; i < children.length(); i++) {
						if( children[i].@KEYNAME == XML(usertree.selectedItem).@KEYNAME ) {
							delete children[i];
						}
					}
				dtsxml2.@KEYNAME=headkeyname.text;
				dtsxml2.@VALUE=headvalue.text;
				ta.text=dtsxml2.toXMLString();
				userdtsxml.source=XMLList(dtsxml2.*);
				userdtsxml.refresh();
				}else {Alert.show("请选择节点！");}
			}
			private function saveconfig(event:Event):void
			{
				Alert.show("是否要保存配置？", "保存配置",3, this, saveconfigHandler);
			}
			private function saveconfigHandler(event:CloseEvent):void {
				if (event.detail==Alert.YES){
					issavedelete=true;
					dtsxml2.@KEYNAME=headkeyname.text;
					dtsxml2.@VALUE=headvalue.text;
					var tempstr0:String="{version:\"1.0\",type:\"request\",reqflag:false,reqtype:\"xml\",respflag:false,resptype:\"json\",active:\"YSProxyDtpDTSConfigInsert\",reqmemo:\" \",application:\"MyApp\",username:\"admin\"}";
					var tempstr1:String="<?xml version=\"1.0\" encoding=\"gbk\" ?>"+dtsxml2.toXMLString();
					tempstr=formatsendmsg(tempstr0)+formatsendmsg(tempstr1);
					ta.text+="\n\n发送字串\n"+tempstr+"\n";
					getConnect();
					
				}
			}
			internal function formatsendmsg(msg:String):String{
				var m:ByteArray=new ByteArray();
				m.writeMultiByte(msg, "GB_CN");
				var msglen:String=m.length.toString();
				var msglenlen:String=msglen.length.toString();
				msg=msglenlen+msglen+msg;
				return(msg);
			}
			private function editxml():void {
			    var service_call:ServiceCall = new ServiceCall();
                var userbus:Object = new Object();
                if (editxml_text.text.length == 0)
                    userbus['"__DICT_IN"'] = ['ALL'];
                else
                    userbus['"__DICT_IN"'] = [editxml_text.text];
				var dtsCfgSel:DtsRequest = new DtsRequest(JSON.encode(userbus));
				dtsCfgSel.SetHead('true', '"json2userbus"', 'true', '"xml2"', '"YSDBSDTSObjectConfigSelect"');
				
				service_call.SetCompleteHandler(this);
				service_call.SetServerInfo(ip_text.text, int(port_text.text));
				service_call.do_service_call(dtsCfgSel.RequestHead, dtsCfgSel.RequestBody);
			}
			public function disxml():void {
				var tempstr0:String="{version:\"1.0\",type:\"request\",reqflag:false,reqtype:\"json\",respflag:false,resptype:\"json\",active:\"YSDBSDTSObjectSelect\"}";
				var tempstr1:String="{\"__DICT_IN\":[\""+editxml_text.text+"\"]}";
				tempstr=formatsendmsg(tempstr0)+formatsendmsg(tempstr1);
				ta.text+="\n\n发送字串\n"+tempstr+"\n";
				// getConnect();
				_serviceCall.do_service_call(tempstr0, tempstr1);
			}
			public function newwin():void {
				if(editxml_text.text!=""){
					titleWindow = PopUpManager.createPopUp(this, newview, true) as TitleWindow;
					PopUpManager.centerPopUp(titleWindow);
//                	tempstr="<views>"+userdtsxml.source.toXMLString()+"</views>";
				}else{Alert.show("请输入DTS号！");}
			}
			
			private function chgsocket():void {
				if(ip_text.text=="192.168.0.77"){ip_text.text="192.168.0.201";port_text.text="6900";}
				else {ip_text.text="192.168.0.77";port_text.text="16920";}
			}
			private function cleartree():void{
//				dtsxml2=<L KEY="config" KEYNAME="字段定义1" VALUE="field"/>;
				dtsxml2.@KEYNAME=headkeyname.text;
				dtsxml2.@VALUE=headvalue.text;
				userdtsxml.source=XMLList(dtsxml2.*);
				while (userdtsxml.length>0) {userdtsxml.removeAll();}
				ta.text=dtsxml2.toXMLString();
//				userdtsxml.refresh();
			}
		]]>
	</mx:Script>
	<mx:TitleWindow title="系统配置" width="100%" height="100%" fontSize="13">
		<mx:HBox  width="100%" height="100%">
			<mx:VBox width="25%" height="100%">
				<mx:Label text="source"/>
				<mx:Tree  labelField="@KEYNAME" dataProvider="{sysdtsxml}"
						 id="systree" width="100%" height="90%" 
						 allowMultipleSelection="true"                
						 dragEnabled="true"
						 dragComplete="onTreeDragComplete(event)"
						 dropEnabled="false"
						 dragMoveEnabled="false"
						 doubleClickEnabled="true" 
						 doubleClick="{if(systree.selectedItem.@KEY=='DTS') editxml_text.text=systree.selectedItem.@VALUE;}"/>
				<mx:HBox width="100%" horizontalAlign="left">
					<mx:Label text="标题：" fontSize="12"/>
					<mx:TextInput width="150"  fontSize="12" text="{systree.selectedItem.@KEYNAME}"/>
				</mx:HBox>
				<mx:HBox width="100%" horizontalAlign="left">
					<mx:Label text="键名：" fontSize="12"/>
					<mx:TextInput width="150"  fontSize="12" text="{systree.selectedItem.@KEY}"/>
				</mx:HBox>
				<mx:HBox width="100%" horizontalAlign="left">
					<mx:Label text="键值：" fontSize="12"/>
					<mx:TextInput width="170" fontSize="12" text="{systree.selectedItem.@VALUE}"/>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="25%" height="100%">
				<mx:HBox width="100%" horizontalAlign="left">
					<mx:Label text="标题：" fontSize="12"/>
					<mx:TextInput id="headkeyname" width="150" fontSize="12" text="字段定义1"/>
				</mx:HBox>
				<mx:HBox width="100%" horizontalAlign="left">
					<mx:Label text="键值：" fontSize="12"/>
					<mx:TextInput id="headvalue" width="150" fontSize="12" text="field"/>
					<mx:Spacer width="100%"/>
					<mx:Button label="清空树" fontSize="12" click="cleartree()"/>
				</mx:HBox>
				<mx:Tree labelField="@KEYNAME" dataProvider="{userdtsxml}"
						 id="usertree" width="100%" height="80%"
						 allowMultipleSelection="true"                
						 dragEnabled="true" click="{selectedindex=usertree.selectedIndex;}"
						 dragComplete="onTreeDragComplete(event)"
						 dropEnabled="true"/>
				<mx:HBox width="100%" horizontalAlign="left">
					<mx:Label text="标题：" fontSize="12"/>
					<mx:TextInput id="KEYNAMEtext" width="150"  fontSize="12" text="{usertree.selectedItem.@KEYNAME}"
						change="{if(usertree.selectedIndex==selectedindex) {usertree.selectedItem.@KEYNAME=KEYNAMEtext.text;showtext();}}"/>
				</mx:HBox>
				<mx:HBox width="100%" horizontalAlign="left">
					<mx:Label text="键名：" fontSize="12"/>
					<mx:TextInput id="keytext" width="150"  fontSize="12" text="{usertree.selectedItem.@KEY}" 
						change="{if(usertree.selectedIndex==selectedindex) {usertree.selectedItem.@KEY=keytext.text;showtext();}}"/>
				</mx:HBox>
				<mx:HBox width="100%" horizontalAlign="left">
					<mx:Label text="键值：" fontSize="12"/>
					<mx:TextInput id="valuetext" width="170" fontSize="12" text="{usertree.selectedItem.@VALUE}" 
						change="{if(usertree.selectedIndex==selectedindex) {usertree.selectedItem.@VALUE=valuetext.text;showtext();}}"/>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="50%" height="100%">
				<mx:HBox width="100%" horizontalAlign="center">
					<mx:Label text="IP：" fontSize="12" textAlign="right"/>
					<mx:TextInput width="100" id="ip_text" text="192.168.0.77"/>
					<mx:Label text="端口：" width="55" fontSize="12" textAlign="right"/>
					<mx:TextInput width="60" id="port_text" text="16920"/>
					<mx:Spacer width="10%"/>
					<mx:Button label="更换" click="chgsocket();"/>
				</mx:HBox>
				<mx:HBox borderStyle="solid" width="100%" color="0x323232" horizontalAlign="left">
		            <mx:Button label="ALL" click="{editxml_text.text='';editxml();}"/>
		            <mx:Label text="DTS：" fontSize="12"/>
		            <mx:TextInput width="170" id="editxml_text" text=""/>
		            <mx:Button label="编辑" click="editxml();"/>
		            <mx:Button label="页面" click="disxml();"/>
		            <mx:Button label="生成" click="newwin();"/>
		        </mx:HBox>
		        <mx:TextArea id="ta" width="100%" height="100%"/>
			</mx:VBox>
		</mx:HBox>
	</mx:TitleWindow>
	<mx:Script>
		<![CDATA[
			internal function getConnect():void{
				var sIP:String = ip_text.text;
				var sPort:Number = Number(port_text.text);
				if(!(sIP&&sPort)){
					Alert.show('服务器地址和端口号必填！','Warning:');
				}else{
					ta.text+= 'Connecting......\n';
					socket.connect(sIP,sPort);
				}
			}
			internal function funreceive(event:ProgressEvent):void
			{
				var tempmstr:ByteArray=new ByteArray;
				while(socket.bytesAvailable){
					socket.readBytes(tempmstr,0,socket.bytesAvailable);
				}
				mstr.writeBytes(tempmstr,0,tempmstr.length);
				ta.text+="返回字串\n"+tempmstr+"\r\n";
//				trace("tempmstr",tempmstr.length);
//				trace("tempmstr",tempmstr[0]);
//				trace("tempmstr",tempmstr[1]);
//				trace("mstr",mstr.length);
//				trace("mstr",mstr[0]); change="{Alert.show('kkk');}"
//				trace("mstr",mstr[1]);
				receivestr="";
				receivestr+=mstr;
				var lengleng:int=0;
				var leng:int=0;
				var lengleng1:int=0;
				var leng1:int=0;
				lengleng=int(receivestr.substr(0,1));
				leng=int(receivestr.substr(1,lengleng));
				if(receivestr.length>(leng+1+lengleng)){
					lengleng1=int(receivestr.substr(1+lengleng+leng,1));
					leng1=int(receivestr.substr(2+lengleng+leng,lengleng1));
					totallength=2+lengleng+leng+lengleng1+leng1;
				}
//				if((receivestr.substr(-2,2)=="]}")||(receivestr.substr(-4,4)=="</L>")||(receivestr.substr(-4,4)=="ews>")
//				||(receivestr.substr(-4,4)=="fig>")||(receivestr.substr(-2,2)=="}0")||(receivestr.substr(-2,2)=="?>")) {
				if(mstr.length>=totallength){
					receivestr="";
					receivestr+=mstr;
					ta.text+="*****MSTR*****\n"+mstr+"\r\n";
					ta.text+="\n字串接收完毕\n";
					ta.text+="*********************返回字串－－末尾200********************\n"+receivestr.substr(-200,200)+"\r\n";
					while ((receivestr.substr(-2,2)!="}0")&&(receivestr.substr(-1,1)!=">")&&(receivestr.substr(-2,2)!="]}")){
						receivestr=receivestr.substring(0,receivestr.length-1);
					}
					ta.text+="*********************调整后－－末尾200********************\n"+receivestr.substr(-200,200)+"\r\n";
					ta.text+="\n调整完毕\n";
					mstr=new ByteArray;
					socket.close();
					totallength=999999;
					if((initflag)&&(receivestr.substr(-4,4)=="</L>")){
						initflag=false;
						while (receivestr.substr(0,6)!="<L KEY"){
							receivestr=receivestr.substring(1,receivestr.length);
						}
						trace(receivestr);
						dtsxml=XML(receivestr);
						sysdtsxml.source=XMLList(dtsxml.L);
						sysdtsxml.refresh();
					}
					if(receivestr.substr(-4,4)=="ews>"){
						while (receivestr.substr(0,6)!="<views"){
							receivestr=receivestr.substring(1,receivestr.length);
						}
						ta.text=receivestr;
					}else if(receivestr.substr(-4,4)=="fig>"){
						while (receivestr.substr(0,6)!="<confi"){
							receivestr=receivestr.substring(1,receivestr.length);
						}
						ta.text=receivestr;
					}else if(receivestr.substr(-1,1)=="0"){
						dtsxml=dtsxml3;
						sysdtsxml.source=XMLList(dtsxml.L);
						sysdtsxml.refresh();
					}else if(receivestr.substr(-2,2)=="?>"){
						Alert.show('DTS号错误！','Warning:');
					}
					if(issavedelete){
						issavedelete=false;
						if(receivestr.substr(-4,4)=="[0]}"){
							editxml_text.text="";
							editxml();
						}else{Alert.show('删除错误！','Warning:');}
					}
				}
			}
            internal function funConnect(event:Event):void
			{
				ta.text+="\n连接已建立\n";
				receivestr="";
				socket.writeMultiByte(tempstr,"CN-GB");
				socket.flush();
			}
			internal function funClose(event:Event):void
			{
				ta.text+="\n连接已关闭\n";
//				socket.close();
			}
			internal function funSecurity(e:SecurityErrorEvent):void{
				Alert.show('安全错误：'+e.text,'Security Error');
				ta.text+= 'Security Error!';
			}
			internal function funIOError(e:IOErrorEvent):void{
				Alert.show('IO错误：'+e.text,'Socket connect Error');
				ta.text+= 'Socket connect Error!';
			}
		]]>
	</mx:Script>
	
</mx:Application>
