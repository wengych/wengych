★版本控制系统使用说明★
  ▲使用工具:git
  ▲git简单说明:
    git是由Linus开发的分布式版本控制系统，现已被大量开源项目所使用
    git在Linux下的安装非常简单，Debian/Ubuntu中使用sudo apt-get install git-core
    更多详细使用说明参见progit中文文档:  http://progit.org/book/zh/
  ▲版本库权限控制:
    √管理员根据不同开发人员的职责，控制开发人员的库使用权限
    √编辑仓库gitosis-admin根目录下的gitosis.conf文件,定义组、组权限(权限中定义对应仓库)及组成员
    √添加新用户时,新用户将自己的公钥提交给管理员
    √管理员将用户的公钥保存在仓库gitosis-admin的keydir目录下
    √管理员修改gitosis.conf将新用户添加至该用户可写或可读的组中
    √管理员commit并push仓库gitosis-admin成功后,新用户即可访问在gitosis.conf中定义好的组
  ▲windows下的git
    √msysgit
      △主页: http://code.google.com/p/msysgit/
      △说明: 基于MSys的win32版本git
      △git gui可以打开一个图形化的界面进行版本库的操作
    √TortoiseGit
      △主页: http://code.google.com/p/tortoisegit/
      △说明: 小乌龟客户端的git版本
      △详细使用说明参考TortoiseGit网站
    √公网访问方式
      △ssh://git@124.207.197.178:6801/callcenter.git
      △详细说明
        ○ssh:// 透过ssh协议
        ○git@ git用户访问
        ○124.207.197.178 ip地址
        ○6801 端口号
        ○callcenter.git 仓库名
  ▲配置自己的git客户端的user信息
    √git config --global user.name="Charles Weng" #替换Charles Weng为你自己的名字，此处的username会体现在提交后的log中
    √git config --global user.email="wengych@gmail.com;ychweng@yspay.com" #替换为你的邮件地址
  ▲基本操作
    √clone: 克隆一份远端的仓库到本地
      △git clone ssh://git@server:port/respority-name.git
      △git clone git@server:respority-name.git
      △git clone git://server/respority-name
      △git clone http://server/respority-name
      △git clone https://server/respority-name
    √init: 创建一个仓库
      △git init
    √add: 向仓库添加一个新文件，或将一个更改的文件暂存到stage区域
      △git add filename
    √commit: 将当前stage区域的数据提交到仓库中
      △git commit -m "comment"
    √branch: 查询、建立或删除分支
      △git branch #列本地分支
      △git branch -r #列远端分支
      △git branch -a #列全部分支
      △git branch <branch-name> #建立分支
      △git branch -d <branch-name> #删除分支
    √tag: 创建、查询、删除或校验tag中的对象，tag:标签或快照
      △git tag #分支标签
      △git [-a | -s | -u <key-id>] <tag-name> #创建标签
      △git -d <tag-name>
    √checkout: 切换到branch或tag
      △git checkout <branch or tag>
    √stash: 暂存当前修改，可理解为压栈

  ▲提交规则
    √编译器产生的临时文件不放入代码库
    √外部程序库不放入代码库
    √尽量采用相对小、相对独立的提交，一次提交所修改的文件尽量少
    √每次提交必须带有注释，最好使用能够表示本次修改性质的描述，例如
      △:Add somthing.
      △:Bug [fix|found]: describe the bug or fix.
      △:Change something.
      △:Del something.
      △:Enhance something.
      △:New something.
      △:Tmp for some cause.
    √本地库建立分支修改代码，测试完毕后合并到主干 (合并提交检查?code review?)
